#!/bin/python

'''
Lab instructions: 
Complete each function below so that all doctests pass.
You can run the doctess with the command

$ python3 -m doctest --verbose lab.py

Once all doctests pass, upload the output of the above command to sakai.
'''


################################################################################
# PART I:
# These functions review the control flow and math operations from last week
################################################################################

def sum_of_digits(n):
    '''
    Return the sum of the digits in the input number n.

    HINT: 
    Use a while loop with the `//` and `%` operators.
    The expression `n%10` will give the last digit of the number `n`,
    and the expression `n//10` removes the last digit from the number.

    >>> sum_of_digits(5)
    5
    >>> sum_of_digits(15)
    6
    >>> sum_of_digits(51)
    6
    >>> sum_of_digits(1234567890)
    45
    '''


def triangular_number(n):
    '''
    Return the n-th triangular number.

    NOTE:
    The series of triangular numbers is generated by starting with 0.
    Then adding 1,
    then adding 2,
    then adding 3,
    ...
    and on the ith iteration, adding i.

    For more details, see wikipedia:
    https://en.wikipedia.org/wiki/Triangular_number
    
    >>> triangular_number(0)
    0
    >>> triangular_number(1)
    1
    >>> triangular_number(2)
    3
    >>> triangular_number(3)
    6
    >>> triangular_number(4)
    10
    >>> triangular_number(5)
    15
    >>> triangular_number(20)
    210
    >>> triangular_number(100)
    5050
    >>> triangular_number(10000)
    50005000
    >>> triangular_number(12345)
    76205685
    '''


def sum_of_primes(n):
    '''
    Return the sum of all prime numbers less than or equal to n.

    HINT:
    In the previous lab, you defined a function is_prime,
    and I've provided my implementation of this function below.
    To solve sum_of_primes, use a for loop with an if statement;
    the condition on the if statement will call the is_prime function.

    >>> sum_of_primes(0)
    0
    >>> sum_of_primes(1)
    0
    >>> sum_of_primes(2)
    2
    >>> sum_of_primes(3)
    5
    >>> sum_of_primes(4)
    5
    >>> sum_of_primes(5)
    10
    >>> sum_of_primes(6)
    10
    >>> sum_of_primes(7)
    17
    '''


def is_prime(n):
    '''
    Return True if n is prime, and False otherwise.
    Recall that a prime number is divisible only by itself and 1,
    and by convention 1 is not considered to be a prime number.

    NOTE: 
    You already implemented this function in the previous lab,
    and you do not have to implement anything for this function in this lab.
    It is provided as a "helper function" for the sum_of_primes function above.

    >>> is_prime(1)
    False
    >>> is_prime(2)
    True
    >>> is_prime(3)
    True
    >>> is_prime(4)
    False
    >>> is_prime(97)
    True
    >>> is_prime(99)
    False
    '''
    if n == 1:
        return False
    for i in range(2,n):
        if n%i == 0:
            return False
    return True


################################################################################
# PART II:
# These functions require you to use python lists.
################################################################################

def last_element(xs):
    '''
    Return the last element of the input list.
    If the input list has no last element, return None.

    HINT:
    Use negative indexes.

    >>> last_element([0,1,2,3,4,5,6,7,8,9])
    9
    >>> last_element(['a','b','c','d'])
    'd'
    >>> last_element([0,1])
    1
    >>> last_element([])
    '''


def last_element_list(xs):
    '''
    Return a list containing only the last element.

    HINT:
    Use negative indexes.

    >>> last_element_list([0,1,2,3,4,5,6,7,8,9])
    [9]
    >>> last_element_list(['a','b','c','d'])
    ['d']
    >>> last_element_list([0,1])
    [1]
    >>> last_element_list([])
    []
    '''


def first_three(xs):
    '''
    Return a list containing the last three elements of the input list.
    Of the list contains three or fewer elements,
    then return the entire list.

    HINT:
    Use slices.

    >>> first_three([0,1,2,3,4,5,6,7,8,9])
    [0, 1, 2]
    >>> first_three(['a','b','c','d'])
    ['a', 'b', 'c']
    >>> first_three([0,1])
    [0, 1]
    >>> first_three([])
    []
    '''


def last_three(xs):
    '''
    Return a list containing the last three elements of the input list.
    If the list contains three or fewer elements, then return the entire list.

    HINT:
    Use slices.

    >>> last_three([0,1,2,3,4,5,6,7,8,9])
    [7, 8, 9]
    >>> last_three(['a','b','c','d'])
    ['b', 'c', 'd']
    >>> last_three([0,1])
    [0, 1]
    '''


def filter_even(xs):
    '''
    Return a list with all the even elements removed.

    HINT:
    Use the accumulator pattern with a for loop.

    >>> filter_even([1,3,5])
    [1, 3, 5]
    >>> filter_even([2,4,6])
    []
    >>> filter_even([4,5,6,7])
    [5, 7]
    >>> filter_even([20,13,4,16,8,19,10])
    [13, 19]
    '''


def bigger_than_10(xs):
    '''
    Return the number of elements in the list bigger than 10

    >>> bigger_than_10([])
    0
    >>> bigger_than_10([10])
    0
    >>> bigger_than_10([11,1,12,2,13,3,14,4,15,5])
    5
    >>> bigger_than_10([4,5,6,11])
    1
    '''


def second_largest(xs):
    '''
    Return the second largest element in a list.
    If the list has less than 2 elements, return None.

    HINT:
    Use the .sort() function and lists indexing.

    >>> second_largest([1,2,3])
    2
    >>> second_largest([99,-56,80,100,90])
    99
    >>> second_largest(list(range(0,100)))
    98
    >>> second_largest([10])
    >>> second_largest([])
    '''


def has_index_at_value(xs):
    '''
    Return True if xs[i] == i for any i.

    HINT:
    For this problem, you need access to the both the indexes and the values.
    Therefore, you cannot use a for loop that looks like

        for x in xs:

    and instead you must use a for loop that looks like

        for i in range(len(xs)):

    >>> has_index_at_value([0])
    True
    >>> has_index_at_value([1])
    False
    >>> has_index_at_value([1, 1])
    True
    >>> has_index_at_value([1, 0])
    False
    >>> has_index_at_value([0, 0])
    True
    >>> has_index_at_value([7, 3, 2, 8])
    True
    >>> has_index_at_value([2, 9, 5, 6, 19, 6, 6, 6, 6, 6])
    True
    >>> has_index_at_value([2, 9, 5, 4, 19, 4, 4, 4, 4, 4])
    False
    '''


def flatten(xss):
    '''
    Convert a list of lists into a single list that contains the same elements.

    >>> flatten([[True,False],[False,True]])
    [True, False, False, True]
    >>> flatten([[1,2,3],[4,5,6],[7,8,9]])
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
    >>> flatten([['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']])
    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']
    >>> flatten([[10]])
    [10]
    '''


def filter_flatten(xss):
    '''
    This function takes as input a list of lists and returns a single list.
    The first element of the returned list is equal to the first element in the first nested list,
    the second element of the returned list is equal to the second element in the second nested list,
    and in general the n-th element of the returned list is equal to the n-th element in the n-th nested list.

    HINT:
    You will need to have access to the indexes and not just values.
    So your for loop should look something like

        for i in range(len(xss)):
            # do something here with xss[i]

    >>> filter_flatten([[True,False],[False,True]])
    [True, True]
    >>> filter_flatten([[1,2,3],[4,5,6],[7,8,9]])
    [1, 5, 9]
    >>> filter_flatten([['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']])
    ['a', 'f', 'k', 'p']
    >>> filter_flatten([[10]])
    [10]
    '''


################################################################################
# PART III:
# These functions require you to use python dictionaries.
################################################################################


# These dictionaries store the grades of famous people in their math, english, and economics classes.
# You shouldn't modify these dictionaries,
# they are used in the doctests for the functions below.
math_grades={
        'donald knuth':85,
        'hypatia':75,
        'emmy noether':86,
        'leonhard euler':92,
        'grigori perelman':95,
        'alexander grothendieck':95,
        'shelton cooper':72,
        'ada lovelace':96,
        }

english_grades={
        'emily dickenson':92,
        'edgar allan poe':88,
        'william shakespeare':84,
        'robert frost':83,
        'dorthy day':95,
        'douglas adams':42,
        'maya angelou':89,
        'emma goldman':85,
        }

economics_grades={
        'christine lagarde':85,
        'alan greenspan':92,
        'adam smith':88,
        'kristalina georgieva':79,
        'karl marx':90,
        'pierre-joseph proudhon':95,
        }

# implement the functions below

def get_number_of_students_in_class(d):
    '''
    Return the total number of entries in the dictionary.

    >>> get_number_of_students_in_class(math_grades)
    8
    >>> get_number_of_students_in_class(english_grades)
    8
    >>> get_number_of_students_in_class(economics_grades)
    6
    '''


def highest_grade(d):
    '''
    Return the largest value.

    >>> highest_grade(math_grades)
    96
    >>> highest_grade(english_grades)
    95
    >>> highest_grade(economics_grades)
    95
    '''


def student_with_highest_grade(d):
    '''
    Return the key that has the greatest value.

    >>> student_with_highest_grade(math_grades)
    'ada lovelace'
    >>> student_with_highest_grade(english_grades)
    'dorthy day'
    >>> student_with_highest_grade(economics_grades)
    'pierre-joseph proudhon'
    '''


def students_getting_an_a(d):
    '''
    Return a list of students whose grade is at least 90.

    HINT: 
    The returned list is required to be sorted,
    and this can be achieved by using the list.sort() method.

    >>> students_getting_an_a(math_grades)
    ['ada lovelace', 'alexander grothendieck', 'grigori perelman', 'leonhard euler']
    >>> students_getting_an_a(english_grades)
    ['dorthy day', 'emily dickenson']
    >>> students_getting_an_a(economics_grades)
    ['alan greenspan', 'karl marx', 'pierre-joseph proudhon']
    '''


################################################################################
# PART IV:
# These functions require you to combine both python dictionaries and lists.
################################################################################

# Twitter uses python dictionaries to store the information about each tweet.
# The following list contains real tweets sent by President Trump.
trump_tweets=[
        { "id_str": "947824196909961216", 
          "text": "Will be leaving Florida for Washington (D.C.) today at 4:00 P.M. Much work to be done, but it will be a great New Year!", 
          "created_at": "Mon Jan 01 13:37:52 +0000 2018",
          "retweet_count": 8656, 
          "user":{
            "name":"Donald J. Trump",
            "screen_name":"realdonaldtrump",
            "location":"Washington, DC",
            },
          },
        { "id_str": "947614110082043904", 
          "text": "HAPPY NEW YEAR! We are MAKING AMERICA GREAT AGAIN, and much faster than anyone thought possible!", 
          "created_at": "Sun Dec 31 23:43:04 +0000 2017", 
          "retweet_count": 35394, 
          "user":{
            "name":"Donald J. Trump",
            "screen_name":"realdonaldtrump",
            "location":"Washington, DC",
            },
          }, 
        { "id_str": "947810806430826496", 
          "text": "Iran is failing at every level despite the terrible deal made with them by the Obama Administration. The great Iranian people have been repressed for many years. They are hungry for food &amp; for freedom. Along with human rights, the wealth of Iran is being looted. TIME FOR CHANGE!", 
          "created_at": "Mon Jan 01 12:44:40 +0000 2018", 
          "retweet_count": 15176, 
          "user":{
            "name":"Donald J. Trump",
            "screen_name":"realdonaldtrump",
            "location":"Washington, DC",
            },
          }, 
        { "id_str": "947592785519173637", 
          "text": "As our Country rapidly grows stronger and smarter, I want to wish all of my friends, supporters, enemies, haters, and even the very dishonest Fake News Media, a Happy and Healthy New Year. 2018 will be a great year for America!", 
          "created_at": "Sun Dec 31 22:18:20 +0000 2017", 
          "retweet_count": 3969893, 
          "user":{
            "name":"Donald J. Trump",
            "screen_name":"realdonaldtrump",
            "location":"Washington, DC",
            },
          }, 
        { "id_str": "947802588174577664", 
          "text": "The United States has foolishly given Pakistan more than 33 billion dollars in aid over the last 15 years, and they have given us nothing but lies &amp; deceit, thinking of our leaders as fools. They give safe haven to the terrorists we hunt in Afghanistan, with little help. No more!", 
          "created_at": "Mon Jan 01 12:12:00 +0000 2018", 
          "retweet_count": 51483, 
          "user":{
            "name":"Donald J. Trump",
            "screen_name":"realdonaldtrump",
            "location":"Washington, DC",
            },
          }, 
        ]


def most_retweeted(tweets):
    '''
    This function takes as input a list of tweets,
    it inspects these tweets to find the tweet with the highest "retweet_count",
    and returns the "id_str" of that tweet.

    NOTE:
    Unlike previous problems, the input list has semantic meaning,
    and is therefore called `tweets` instead of `xs`.
    Notice that this is plural, indicating the input is a list.
    In my solution, I use a for loop that looks like

        for tweet in tweets:

    where tweet is singular because it is an individual tweet dictionary.

    >>> most_retweeted(trump_tweets[:1])
    '947824196909961216'
    >>> most_retweeted(trump_tweets[:2])
    '947614110082043904'
    >>> most_retweeted(trump_tweets[:3])
    '947614110082043904'
    >>> most_retweeted(trump_tweets[:4])
    '947592785519173637'
    >>> most_retweeted(trump_tweets[:5])
    '947592785519173637'
    '''
